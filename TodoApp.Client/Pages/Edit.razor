@page "/edit/{id}"
@attribute [Authorize]
@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager Navigation

<MudCard Outlined="true">
	<MudCardHeader class="d-flex justify-center">
		<MudText Typo="Typo.h5">Edit</MudText>
	</MudCardHeader>
	<MudCardContent>
		<EditForm Model="@model" OnValidSubmit="@HandleEdit">
			<DataAnnotationsValidator />
			
			<MudTextField T="Guid" ReadOnly="true" InputType="InputType.Hidden" @bind-Value="model.Id" For="@(() => model.Id)" />
			<MudTextField T="string" Label="Title" @bind-Value="model.Title" For="@(() => model.Title)" />

			<div class="d-flex align-center justify-end mt-4">
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Edit</MudButton>
			</div>
		</EditForm>

		@if (error != null)
		{
			<MudText Color="Color.Error">
				@error
			</MudText>
		}
	</MudCardContent>
</MudCard>

@code {
	[Parameter]
	public string id { get; set; }

	string? error;
	private TodoResponseDto model = new TodoResponseDto();

	string? api;

	protected override async Task OnInitializedAsync()
	{
		api = Configuration.GetSection("api").Value;
		model = await Http.GetFromJsonAsync<TodoResponseDto>($"{api}/Todo/{id}");

		if (model == null)
			Navigation.NavigateTo("/");
		
		StateHasChanged();
	}

	private async Task HandleEdit()
	{
		var requestModel = new TodoUpdateRequestDto()
		{
			Id = model.Id,
			Title = model.Title
		};

		var response = await Http.PutAsJsonAsync($"{api}/Todo", requestModel);

		if (!response.IsSuccessStatusCode)
		{
			error = await response.Content.ReadAsStringAsync();
			StateHasChanged();
			return;
		}

		Navigation.NavigateTo("/");
	}
}
