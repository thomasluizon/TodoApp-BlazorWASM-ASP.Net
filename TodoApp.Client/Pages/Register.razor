@page "/register"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IConfiguration Configuration;

<MudCard Outlined="true">
	<MudCardHeader class="d-flex justify-center">
		<MudText Typo="Typo.h5">Register</MudText>
	</MudCardHeader>
	<MudCardContent>
		<EditForm Model="@model" OnValidSubmit="@HandleRegister">
			<DataAnnotationsValidator />

			<MudTextField T="string" Label="Name" @bind-Value="model.Name" For="@(() => model.Name)" />
			<MudTextField T="string" Label="Email" @bind-Value="model.Email" For="@(() => model.Email)" />
			<MudTextField T="string" InputType="InputType.Password" Label="Password" @bind-Value="model.Password" For="@(() => model.Password)" />
			
			<div class="d-flex align-center justify-end mt-4">
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
			</div>
		</EditForm>

		@if (error != null)
		{
			<MudText Color="Color.Error">
				@error
			</MudText>
		}
	</MudCardContent>
</MudCard>

@code {
	UserRegisterDto model = new UserRegisterDto();
	string? error = null;

	private async Task HandleRegister(EditContext context)
	{
		var api = Configuration.GetSection("api").Value;
		var response = await Http.PostAsJsonAsync($"{api}/Auth/Register", model);

		if (!response.IsSuccessStatusCode)
		{
			error = await response.Content.ReadAsStringAsync();
			StateHasChanged();
			return;
		}

		error = null;
		StateHasChanged();
		NavManager.NavigateTo("/");
	}
}
